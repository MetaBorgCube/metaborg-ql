module Expressions

imports Lexical

context-free syntax
  
  Expr.Ref = <<ID>>
       
  Expr.Mul  = <<Expr> * <Expr>> {left}
  Expr.Div  = <<Expr> / <Expr>> {left}
  Expr.Add  = <<Expr> + <Expr>> {left}
  Expr.Sub  = <<Expr> - <Expr>> {left}   
    
  Expr.Not = <!<Expr>> 
  Expr.And = <<Expr> && <Expr>>
  Expr.Or  = <<Expr> || <Expr>> {left}
  
  Expr.Lt   = [[Expr] < [Expr]]  {non-assoc}
  Expr.Leq  = [[Expr] <= [Expr]] {non-assoc}
  Expr.Gt   = [[Expr] > [Expr]]  {non-assoc}
  Expr.Geq  = [[Expr] >= [Expr]] {non-assoc}
  Expr.Eq   = <<Expr> == <Expr>> {non-assoc}
  Expr = <(<Expr>)> {bracket}
  

context-free priorities 

  Expr.Not > 
  {left: Expr.Mul Expr.Div } >
  {left: Expr.Add Expr.Sub } >
  {non-assoc: Expr.Lt Expr. Leq Expr.Gt Expr.Geq Expr.Eq } >
  {left: Expr.And } >
  {left: Expr.Or }

context-free syntax

  Expr.True  = <true>
  Expr.False = <false>

  ID = "true"  {reject}
  ID = "false" {reject}

template options

  keyword -/- [a-zA-Z0-9\_]
 
context-free syntax

  NumLit.IntLit   = INT
  NumLit.FloatLit = FLOAT
  Expr            = NumLit
  Expr.MoneyLit   = <$<NumLit>>
