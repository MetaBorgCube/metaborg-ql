module ql

imports
  
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  signatures/-
  editor/QL-Outliner
  stratego/metaborg
  runtime/index/-
  runtime/nabl/-
  runtime/properties/-
  runtime/relations/-
  runtime/types/-
  runtime/task/-
  runtime/analysis/-
  runtime/editor/-
  completion
  
  pp
  
  analysis/normalize
  names/-
  types/-

rules // Analysis

  editor-analyze = analyze-all(id, id, id|<language>)

rules // Editor services

  editor-resolve:
    (node, _, _, _, project-path) -> definition
    where
      definition := <analysis-resolve(|<language>, project-path)> node

  editor-hover:
    (node, _, _, _, project-path) -> label
    where
      label := <get-editor-properties(pp-partial-QL-string|<language>, project-path); properties-to-html> node

rules // Debugging
  
  debug-show-analyzed:
    (_, _, ast, path, _) -> (filename, result)
    with
      filename := <guarantee-extension(|"analyzed.aterm")> path;
      result   := ast
  
  debug-index-project =
    analysis-debug-index-project(|<language>)
  debug-index-project-resolve = 
    analysis-debug-index-project-resolve(|<language>)
  debug-index-partition =
    analysis-debug-index-partition(|<language>)

  debug-task-project =
    analysis-debug-task-project(|<language>)
  debug-task-partition =
    analysis-debug-task-partition(|<language>)
  debug-task-selection =
    analysis-debug-task-selection(|<language>)
  debug-index-partition-resolve =
    analysis-debug-index-partition-resolve(|<language>)
    
  debug-project =
    analysis-debug-project(|<language>)
  debug-partition =
    analysis-debug-partition(|<language>)


rules // Editor services



  editor-outline:
    (_, _, ast, path, project-path) -> outline
    where
      outline := <simple-label-outline(to-outline-label)> ast
  
  editor-format:
    (node, _, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path
    ; filename := <guarantee-extension(|$[pp.[ext]])> path
    ; result   := <pp-QL-string-debug> node

rules // Debugging
  
  debug-show-aterm:
    (node, _, _, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path
    ; result   := node