module qls/analysis/names

rules

  nabl-scoping-site =
    ?QLS(_, _)
    ; nabl-scope(
      | [NablNsStyle(), NablNsForm()]
      )

  nabl-get-scope =
    ?QLS(_, _)
    ; ![NablNsStyle(), NablNsForm()]

  nabl-get-name :
    FormRef(f) -> f

  nabl-name-apply(s) =
    FormRef(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?FormRef(f)
    ; origin-track-forced(
        FormRef(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsForm()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-import-site(|lang__, partition__, uniques__, uris__, states__) =
    ?FormRef(f)
    ; origin-track-forced(
        nabl-import(
        | lang__
        , partition__
        , uniques__
        , uris__
        , [ Wildcard(
              [Import(lang__, NablNsQuestion())]
            , Context(
                NablNsForm()
              , f
              , []
              , Current()
              )
            , Current()
            , []
            )
          ]
        )
      |
      )

  nabl-get-name :
    StyleDef(s, body) -> s

  nabl-name-apply(s) =
    StyleDef(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?StyleDef(s, body)
    ; origin-track-forced(
        StyleDef(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsStyle()
          , Unique()
          , Current()
          , []
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?StyleDef(s, body)
    ; StyleDef(
        nabl-store-props(
        | partition__
        , [Prop(NablProp_sty-body(), body, [])]
        )
      , id
      )
    ; fail

  nabl-get-name :
    StyleRef(s) -> s

  nabl-name-apply(s) =
    StyleRef(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?StyleRef(s)
    ; origin-track-forced(
        StyleRef(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsStyle()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )

  nabl-get-name :
    StyledRef(q, _) -> q

  nabl-name-apply(s) =
    StyledRef(s, id)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?StyledRef(q, _)
    ; origin-track-forced(
        StyledRef(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsQuestion()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        , id
        )
      |
      )


imports
  lib/index/-
  lib/nabl/-
  lib/properties/-
  lib/relations/-
  lib/types/-
  lib/task/-
  lib/analysis/-
  lib/editor/-
  include/QL
  ql/analysis/names


signature
  constructors
    NablNsStyle : Namespace


signature
  constructors
    NablProp_sty-body : Property


rules

  nabl-custom-properties(add-properties) =
    ![NablProp_sty-body()] ; add-properties

  sty-body-is(|task*) =
    nabl-prop-calc(|task*, [])

  sty-body-task(|task*) =
    get-or-create-property-task(|task*, NablProp_sty-body())

  sty-body-is(|task*, dep*) =
    nabl-prop-calc(|task*, dep*)

  sty-body-list(|task*) =
    nabl-prop-list(|task*, [])

  sty-body-list(|task*, dep*) =
    nabl-prop-list(|task*, dep*)

  sty-body-lookup(|task*) =
    nabl-prop-lookup(|NablProp_sty-body(), task*, [])

  sty-body-lookup(|task*, dep*) =
    nabl-prop-lookup(|NablProp_sty-body(), task*, dep*)

  sty-body-match(|task*, expected) =
    nabl-prop-match(
    | NablProp_sty-body()
    , task*
    , Eq()
    , expected
    )

  sty-body-match(|task*, relation, expected) =
    nabl-prop-match(|NablProp_sty-body(), task*, relation, expected)

  create-sty-body-task(|task*) =
    fail

  get-sty-body =
    get-property(|NablProp_sty-body())

  store-sty-body(|partition, prop) =
    nabl-store-prop(
    | partition
    , Prop(NablProp_sty-body(), prop, [])
    )

  create-property-task(|partition, kind):
    term -> <create-sty-body-task(|partition)> term
    where NablProp_sty-body() := kind