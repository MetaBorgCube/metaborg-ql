module qls/generate

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	lib/editor-common.generated

	include/QL
	lib/webdsl/WebDSL
	lib/runtime/nabl/-
	lib/runtime/index/-

  ql/generate
  ql/names
	ql/store
	
rules // QLS to WebDSL compilation
	
	compile-qls: 
		QLS(_, page*) ->
		|[
			module form
			
			def1*
			
			ent
			
			session sess { user -> User	}
			
			def2*
			
		  page root() {
				var name := ""
				
				main() {
					horizontalForm() {
						controlGroup("Name: ") { input(name) }
						
				    formActions() {
				    	submit start() [style="display: none;"] {}
				      submitlink start() [class="btn btn-primary"] { "Start questionaire" } " "
				    }
					}
				}
				
			  action start() {
			    x_init;
			    return page1();
			  }
			}
			
			page finish() {
				main() {
					"Thank you for filling in the form"
				}
			}
		]|
		where
			fref*  := <mapconcat(qls-page-forms); make-set> page*;
			def1*  := <map(compile-qls-entity)> fref*;
			ent    := <compile-qls-session-entity> fref*;
			x_init := <compile-qls-session-init> fref*;
			def2*  := <zip(compile-qls-page(|<length> page*))> (page*, <length; upto; Tl> page*)

rules // QLS pages to WebDSL entities
	  	
  compile-qls-entity:
  	FormRef(x_formID) -> |[ entity x_formID { ebd* } ]|
  	where
	  	ebd* := <qls-get-question-asts-in-form; collect-all(compile-ql-entity-part)> x_formID
	  	
rules // QLS pages to WebDSL session Entity
	
	compile-qls-session-entity:
		fref* -> 
		|[
			entity User {
				name :: String (name)
					
			  ebd*
			}
		]|
		where
			ebd* := <map(compile-qls-session-entity-part)> fref*
	
	compile-qls-session-entity-part:
		FormRef(x_formID) -> |[ x_formID -> x_formID ]|
		
	compile-qls-session-init:
		fref* -> |[ sess.user := User { name := name, x_inits } ]|
		where
			x_inits := <map(compile-qls-session-init-part)> fref*
			
	compile-qls-session-init-part:
		FormRef(x_formID) -> |[ x_formID := x_formID {} ]|
	  	
rules // QLS page to WebDSL page	
	
	compile-qls-page(|page_length):
		(Page(x_heading, fref*, part*), n) -> // TODO: Concrete syntax match? meta variable for STRING does not work..
		def |[
	    page x_pageName() {
    		elem_var*
    		
    		init {
    			stat_init*
    		}
	    		
	    	main() {	    		
		    	horizontalForm(x_heading) {
		  		  elem_group*
		  		  
				    formActions() {
				      submitlink submit() [class="btn btn-primary"] { "Submit" } " "
				      elem_nextSubmit
				    }
				  }
		  	}
				  
			  action submit() {
			  	stat_action*
			  	stat_saveall*
			  }
			  elem_nextAction
			  
		    action ignore-validation update(phs:[String]){
		      for(ph in phs){
		        replace(ph);
		      }
		      rollback();
		    }
	  	}
		]|
	  with
	  	x_pageName     := <conc-strings> ("page", <int-to-string> n);
	  	stat_saveall*  := <map(compile-qls-page-save)> fref*;
	  	parts_length   := <length> part*;
	    parts_numbers  := <upto; Tl> parts_length;
	  	{| Var, Init, Action:
	  		elem_group*  := <zip(compile-qls-part(|parts_length)); concat> (part*, parts_numbers);
		  	elem_var*    := <bagof-Var <+ ![]>;
		  	stat_init*   := <bagof-Init <+ ![]>;
		  	stat_action* := <bagof-Action <+ ![]>
  		|};
	  	if <eq> (n, page_length) then
	  		elem_nextSubmit := elem* |[ submitlink finish() [class="btn btn-primary"] { "Finish" } " " ]|;
	  		elem_nextAction := elem  |[ action finish() { stat_action* stat_saveall* return finish(); } ]|
	  	else
	  		elem_nextSubmit := elem* |[ submitlink next() [class="btn btn-primary"] { "Next" } " " ]|;
	  		x_nextPageName  := <conc-strings> ("page", <int-to-string> <inc> n);
	  		elem_nextAction := elem  |[ action next() { stat_action* stat_saveall* return x_nextPageName(); } ]|
	  	end
	  	
  compile-qls-page-save:
  	FormRef(fref) -> |[ x_formID.save(); ]|
  	where
  		x_formID := <compile-ql-form-name> fref

rules // QLS part to WebDSL elements
	  	
	compile-qls-part(|length):
		(|[ qid { s* } ]|, nr) -> elem* |[placeholder x_p { x_q }]|
		where
			body := <get-question-ast> qid;
			x_p  := <compile-placeholder-name> nr;
			x_q  := <compile-qls-group(|s*, length, nr)> body

	compile-qls-part(|length):
		([|[ qid { s* } ]|], nr) -> elem* |[placeholder x_p { x_q }]|
		where
			body := <get-question-ast> qid;
			x_p  := <compile-placeholder-name> nr;
			x_q  := <compile-qls-group(|s*, length, nr)> body

	compile-qls-part(|length):
		(SimpleRef(qid), nr) -> elem* |[placeholder x_p { x_q }]|
		where
			body := <get-question-ast> qid;
			x_p  := <compile-placeholder-name> nr;
			x_q  := <compile-qls-group(|[], length, nr)> body
			
	compile-qls-part(|length):
	 (Section(elem_heading, part*), nr) -> elem* |[ pageHeader() { elem_heading } elem_group* ]| // TODO: Concrete syntax match? meta variable for STRING does not work..
		where
			elem_group* := <map(\part -> (part, nr)\; compile-qls-part(|length))> part*
			
	compile-qls-part(|length):
		(SubSection(elem_heading, part*), nr) -> elem* |[ pageHeader2() { elem_heading } elem_group* ]| // TODO: Concrete syntax match? meta variable for STRING does not work..
		where
			elem_group* := <map(\part -> (part, nr)\; compile-qls-part(|length))> part*
			
rules // QL group to WebDSL page elements
	
	// Question
  compile-qls-group(|styles, part_length, nr): 
  	q@|[ qid : label t ]| -> elem |[ controlGroup(e_label) [passign_style*] { elem_input } ]|
  	where
  		e_label        := <compile-ql-exp> label;
  		passign_style* := <compile-qls-simple-styles> styles;
  		widget         := <fetch-elem(?TypedWidget(_, _)) <+ !()> styles;
  		elem_input     := <compile-qls-group-input(|passign_style*, part_length, nr)> (widget, q)
  		
	// Value
  compile-qls-group(|styles, part_length, nr): 
  	|[ qid : label t ( exp ) ]| -> elem |[ controlGroup(e_label) [passign_style*] { output(e_typeExp) [passign_style*] } ]|
  	where
  		e_label        := <compile-ql-exp> label;
  		e_typeExp      := <compile-ql-exp> exp;
  		passign_style* := <compile-qls-simple-styles> styles
  		
	// Condition
  compile-qls-group(|styles, part_length, nr): 
  	|[ if ( cond ) { q* } ]| -> elem |[ if (e_cond) { elem_group* } ]|
  	where
  		e_cond      := <compile-ql-exp> cond;
  		elem_group* := <map(compile-qls-group(|styles, part_length, nr))> q*

rules // QLS widget styles to WebDSL input
	
	compile-qls-group-input(|passign_style*, part_length, nr) =
		compile-qls-group-input-special(|passign_style*, part_length, nr) 
		<+ compile-qls-group-input-default(|passign_style*, part_length, nr)
	
	
	// TODO: Use switch?
	// Integer, float, string
	compile-qls-group-input-default(|passign_styles, part_length, nr):
		(_, |[ qid : label t ]|) -> call |[ inputajax(x_id) [passign_all*] ]|
		where
			<not(?BoolTy() <+ ?DateTy())> t;
			x_id         := <compile-ql-question-name> qid;
			x_updates    := <compile-update-list(|part_length, nr)>;
			passign_all* := [passign |[oninput=update(x_updates)]|, passign_styles]

	// Boolean
	compile-qls-group-input-default(|passign_styles, part_length, nr):
		(_, |[ qid : label t ]|) -> call |[ inputajax(x_id) [passign_all*] ]|
		where
			<?BoolTy()> t;
			x_id         := <compile-ql-question-name> qid;
			x_updates    := <compile-update-list(|part_length, nr)>;
			passign_all* := [passign |[onchange=update(x_updates)]|, passign_styles]

	// Date (inputajax does not support Date)
	compile-qls-group-input-default(|passign_styles, part_length, nr):
		(_, |[ qid : label t ]|) -> call |[ input(x_id) [passign_all*] ]|
		where
			<?DateTy()> t;
			x_id         := <compile-ql-question-name> qid;
			x_updates    := <compile-update-list(|part_length, nr)>;
			passign_all* := [passign |[onchange=update(x_updates)]|, passign_styles]
	
	
	// Special styling for boolean widgets with radio or dropdown style.		
	compile-qls-group-input-special(|passign_styles, part_length, nr):
		(TypedWidget(BoolTy(), widget), |[ qid : label t ]|) -> call |[ x_call [passign_all*] ]|
		where
			<?Radio() <+ ?Dropdown()> widget;
			x_oid        := <compile-ql-question-name> qid;
			x_id         := <conc-strings> (qid, "_wrap");
			x_call       := <compile-qls-group-input-call(|x_id)> widget;
			x_updates    := <compile-update-list(|part_length, nr)>;
			passign_all* := [passign |[onchange=update(x_updates)]|, passign_styles];
			rules(
				Var    :+ _ -> |[ var x_id : BoolWrap; ]|
				Init   :+ _ -> |[ if(x_oid) { x_id := bw_true; } else { x_id := bw_false; } ]|
				Action :+ _ -> |[ x_oid := x_id.value; ]|
			)
			
	compile-qls-group-input-call(|x_id):
		Radio() -> call |[ radio(x_id) ]|
		
	compile-qls-group-input-call(|x_id):
		Dropdown() -> call |[ select(x_id)[not null] ]|
			
rules // QLS simple styles to WebDSL property assignments
	
	compile-qls-simple-styles:
		style* -> passign |[ style = x_style ]|
		where
			x_style := <filter(compile-qls-simple-style); concat-strings; double-quote> style*
	
  compile-qls-simple-style:
  	Font(name) -> $[font-family: '[<try(un-double-quote)> name]';]
  	
  compile-qls-simple-style:
  	Color(color) -> $[color: [<try(un-double-quote)> color];]

rules // Projections
	
  qls-page-forms:
  	Page(_, fref*, _) -> fref* // TODO: Concrete syntax match? meta variable for STRING does not work..
	
rules // Index

	qls-get-question-asts-in-form:
		form-ref -> question-ast*
		with
			question-def* := <nabl-get-child-definitions(|NablNsQuestion())> form-ref;
			question-ast* := <map(get-question-ast)> question-def*
