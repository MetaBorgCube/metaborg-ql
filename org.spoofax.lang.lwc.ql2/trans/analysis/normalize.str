module analysis/normalize

imports
	
	include/QL
	
rules

	normalize-all:
		Form(fid, q1*) -> Form(fid, q2*)
		where
			<normalize-questions> q1* => q2*

	normalize-questions: [] -> []
	normalize-questions =
		repeat(
				[normalize-question|id] 
			+ normalize-group
		); 
		[id|normalize-questions]
		
	normalize-question:
		q@Question(_, _, _) -> Conditional(True(), [q])
		
	normalize-question:
		q@Computed(_, _, _) -> Conditional(True(), [q])
	
	normalize-question:
		Conditional(c1, [Conditional(c2, q*)]) -> Conditional(And(c1, c2), q*)
		
	normalize-group:
		[Conditional(c, [q1, q2 | qs1]) | qs2] -> [Conditional(c, [q1]), Conditional(c, [q2 | qs1]) | qs2]

// rules
// 		
// 	normalize: |[ exp1  <= exp2  ]| -> |[ exp1 <  exp2 || exp1 == exp2 ]|
// 	normalize: |[ exp1  >  exp2  ]| -> |[ exp2 <  exp1 ]|
// 	normalize: |[ exp1  >= exp2  ]| -> |[ exp2 <= exp1 ]|
// 	normalize: |[ exp   == exp   ]| -> |[ true ]|
// 	
// 	normalize: |[ true  && exp   ]| -> |[ exp   ]|
// 	normalize: |[ false && exp   ]| -> |[ false ]|
// 	normalize: |[ exp   && true  ]| -> |[ exp   ]|
// 	normalize: |[ exp   && false ]| -> |[ false ]|
// 	normalize: |[ exp   && exp   ]| -> |[ exp   ]|
// 	normalize: |[  exp  && !exp  ]| -> |[ false ]|
// 	normalize: |[ !exp  &&  exp  ]| -> |[ false ]|
// 	normalize: |[ true  || exp   ]| -> |[ true  ]|
// 	normalize: |[ false || exp   ]| -> |[ exp   ]|
// 	normalize: |[ exp   || true  ]| -> |[ true  ]|
// 	normalize: |[ exp   || false ]| -> |[ exp   ]|
// 	normalize: |[ exp   || exp   ]| -> |[ exp   ]|
// 	normalize: |[  exp  || !exp  ]| -> |[ true  ]|
// 	normalize: |[ !exp  ||  exp  ]| -> |[ true  ]|
// 	
// 	normalize: |[ !true           ]| -> |[ false ]|
// 	normalize: |[ !false          ]| -> |[ true  ]|
// 	normalize: |[ !!exp           ]| -> |[ exp   ]|
// 	normalize: |[ !(exp1 <  exp2) ]| -> |[  exp1 >=  exp2 ]|
// 	normalize: |[ !(exp1 && exp2) ]| -> |[ !exp1 || !exp2 ]|
// 	normalize: |[ !(exp1 || exp2) ]| -> |[ !exp1 && !exp2 ]|
// 	
// 	normalize: |[ (exp1 && exp2) || exp3 ]| -> |[ (exp1 || exp3) && (exp2 || exp3) ]|
// 	normalize: |[ exp1 || (exp2 && exp3) ]| -> |[ (exp1 || exp2) && (exp1 || exp3) ]|
// 	normalize: |[ exp1 || (exp2 || exp3) ]| -> |[  exp1 || exp2  || exp3 ]|
// 	normalize: |[ exp1 && (exp2 && exp3) ]| -> |[  exp1 && exp2  && exp3 ]|
// 	normalize: |[ exp1 ||  exp2 || !exp2 ]| -> |[ true ]|
// 	normalize: |[ exp1 || !exp2 ||  exp2 ]| -> |[ true ]|
// 	
// 	sort-literals: |[ exp  ||  fid  ||  qid  ]| -> |[ exp  ||  qid ||  fid  ]| where <string-lt> (qid, fid) 
// 	sort-literals: |[ exp  ||  fid  || !qid  ]| -> |[ exp  || !qid ||  fid  ]| where <string-lt> (qid, fid) 
// 	sort-literals: |[ exp  || !fid  ||  qid  ]| -> |[ exp  ||  qid || !fid  ]| where <string-lt> (qid, fid) 
// 	sort-literals: |[ exp  || !fid  || !qid  ]| -> |[ exp  || !qid || !fid  ]| where <string-lt> (qid, fid) 
// 	sort-literals: |[ exp1 ||  exp2 ||  qid  ]| -> |[ exp1 ||  qid ||  exp2 ]| where <not(?Ref(_) + ?Not(Ref(_)))> exp2
// 	sort-literals: |[ exp1 ||  exp2 || !qid  ]| -> |[ exp1 || !qid ||  exp2 ]| where <not(?Ref(_) + ?Not(Ref(_)))> exp2 
// 	
// 	sort-literals: |[  fid  ||  qid ]| -> |[  qid ||  fid  ]| where <string-lt> (qid, fid) 
// 	sort-literals: |[  fid  || !qid ]| -> |[ !qid ||  fid  ]| where <string-lt> (qid, fid) 
// 	sort-literals: |[ !fid  ||  qid ]| -> |[  qid || !fid  ]| where <string-lt> (qid, fid) 
// 	sort-literals: |[ !fid  || !qid ]| -> |[ !qid || !fid  ]| where <string-lt> (qid, fid) 
// 	sort-literals: |[  exp  ||  qid ]| -> |[  qid ||  exp  ]| where <not(?Ref(_) + ?Not(Ref(_)))> exp
// 	sort-literals: |[  exp  || !qid ]| -> |[ !qid ||  exp  ]| where <not(?Ref(_) + ?Not(Ref(_)))> exp
// 		
