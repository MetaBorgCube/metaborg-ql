module ql

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	include/QL
	editor/QL-Outliner
	lib/editor-common.generated
	lib/runtime/index/-
	lib/runtime/nabl/-
	lib/runtime/properties/-
	lib/runtime/relations/-
	lib/runtime/types/-
	lib/runtime/task/-
	lib/runtime/analysis/-
	lib/runtime/editor/-
	
	pp
	utils
	
	ql/analysis/desugar
	ql/analysis/names
	ql/analysis/types.generated
	ql/analysis/dependencies.generated
	
	ql/generation/generate-webdsl
	ql/generation/generate-js
	ql/generation/binary-search
	
	ql/import
	ql/sort
	ql/store
	
	
	qls/analysis/desugar
	qls/analysis/names
	qls/analysis/types.generated
	qls/analysis/normalize
	
	qls/generate-webdsl

rules // Analysis
	
	editor-analyze = analysis-default-editor
	
	analysis-pre-trans        = ql-or-qls(desugar-all, qls-desugar-all)
	analysis-post-trans(|ctx) = ql-or-qls(ql-store-all(|ctx), id)
	
	analysis-single-default-interface = 
		analysis-single-default(id, id, id|<language>)
	analysis-multiple-default-interface = 
		analysis-multiple-default(parse-file <+ !(), id, id, id|<language>, <project-path>)
	
	editor-save = analysis-save-default(|<language>)

rules // Editor services
	
	// Resolves a reference when the user control-clicks or presses F3 in the editor.
	editor-resolve:
		(node, position, ast, path, project-path) -> definition
		where
			definition := <analysis-resolve(|<language>, project-path)> node

	// Returns "hover help" information for a particular node in the editor.
	// For references, this rule is invoked using the resolved term.
	editor-hover:
		(target, position, ast, path, project-path) ->
			<get-editor-properties(pp-QL-string |<language>, project-path);properties-to-html>target

	// Gathers the properties for the properties view.
	editor-properties:
		(target, position, ast, path, project-path) ->
			<get-all-editor-properties(pp-QL-string |<language>, project-path)>target

	// Completes an identifier when the user presses control-space
	// (the completion identifier in the AST provides additional context information)
	editor-complete:
		(node, position, ast, path, project-path) -> proposals
		where
			proposals := <analysis-propose-completions(|<language>, project-path)> ast
	
	// Formats the program using a pretty printer		
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
    	ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <pp-QL-string-debug> selected

  editor-properties:
    (target, position, ast, path, project-path) ->
      <get-editor-properties(debug; pp-QL-string |<language>, project-path); debug> target
      
rules // Builders
	
	builder-generate-webdsl:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
    	index-setup(|<language>, project-path);
    	task-setup(|project-path)
    with
    	filename   := <guarantee-extension(|"app")> path;
    	webdsl-ast := <ql-or-qls(resolve-all-imports; sort-by-dependencies; compile-ql-webdsl, normalize-qls; compile-qls-webdsl)> ast;
    	result     := <pp-webdsl-string> webdsl-ast
    	
	builder-generate-js:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
    	index-setup(|<language>, project-path);
    	task-setup(|project-path)
    with
    	filename := <guarantee-extension(|"js")> path;
    	result   := <ql-or-qls(resolve-all-imports; sort-by-dependencies; compile-ql-js, fail)> ast
    	
	builder-generate-js-html:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
    	index-setup(|<language>, project-path);
    	task-setup(|project-path)
    with
    	filename := <guarantee-extension(|"html")> path;
    	result   := <ql-or-qls(resolve-all-imports;sort-by-dependencies; compile-ql-js-html, fail)> ast

rules // Debugging
	
	// Prints the abstract syntax ATerm of a selection.
	debug-show-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"aterm")> path;
			result	 := selected

	// Prints the desugared concrete syntax of a selection.
	debug-show-desugared:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|$[desugared.[<ql-or-qls(!"ql", !"qls")>]])> path;
			result	 := <ql-or-qls(desugar-all, qls-desugar-all); pp-QL-string-debug> selected

	// Prints the desugared abstract syntax ATerm of a selection.
	debug-show-desugared-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"desugared.aterm")> path;
			result	 := <ql-or-qls(desugar-all, qls-desugar-all)> selected
			
	// Prints the analyzed abstract syntax ATerm.
	debug-show-analyzed-aterm:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
			filename := <guarantee-extension(|"analyzed.aterm")> path;
			result	 := ast
	
	// Prints the analyzed concrete syntax of a selection.
  debug-show-analyzed:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, project-path);
      task-setup(|project-path)
    with
      filename := <guarantee-extension(|$[analyzed.[<ql-or-qls(!"ql", !"qls")>]])> path;
      result   := <try(sort-by-dependencies; rename-form); strip-annos; pp-QL-string-debug> selected
  		
  rename-form = Form(!$[[<id>]Sorted], id)
  	
	debug-index-project =
		analysis-debug-index-project(|<language>)
	debug-index-project-resolve = 
		analysis-debug-index-project-resolve(|<language>)
	debug-index-partition =
		analysis-debug-index-partition(|<language>)

	debug-task-project =
		analysis-debug-task-project(|<language>)
	debug-task-partition =
		analysis-debug-task-partition(|<language>)
	debug-task-selection = 
		analysis-debug-task-selection(|<language>)
		
	debug-project =
		analysis-debug-project(|<language>)
	debug-partition =
		analysis-debug-partition(|<language>)
		
	debug-reanalyze = 
		analysis-debug-reanalyze(|<language>)
		
	analysis-disable-persist = id
	analysis-default-debug-interface(msg) = debug(msg)
	analysis-default-debug-interface = debug
	analysis-default-debug-time-interface(msg) = debug(msg)
	analysis-default-debug-time-interface = debug
