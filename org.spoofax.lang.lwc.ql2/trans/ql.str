module ql

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	include/QL
	editor/QL-Outliner
	lib/editor-common.generated
	lib/runtime/index/-
	lib/runtime/nabl/-
	lib/runtime/properties/-
	lib/runtime/relations/-
	lib/runtime/types/-
	lib/runtime/task/-
	lib/runtime/analysis/-
	lib/runtime/editor/-
	
	pp
	utils
	
	ql/analysis/desugar
	ql/analysis/names
	ql/analysis/types.generated
	ql/analysis/dependencies.generated
	
	ql/generation/generate-webdsl
	ql/generation/generate-js
	ql/generation/binary-search
	
	ql/import
	ql/sort
	ql/store
	
	
	qls/analysis/desugar
	qls/analysis/names
	qls/analysis/types.generated
	qls/analysis/normalize
	
	qls/generate-webdsl

rules // Analysis
	
	analysis-pre-trans        = ql-or-qls(desugar-all, qls-desugar-all)
	analysis-post-trans(|ctx) = ql-or-qls(ql-store-all(|ctx), id)

rules // Editor services

      
rules // Builders
	
	builder-generate-webdsl:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
    	index-setup(|<language>, project-path);
    	task-setup(|project-path)
    with
    	filename   := <guarantee-extension(|"app")> path;
    	webdsl-ast := <ql-or-qls(resolve-all-imports; sort-by-dependencies; compile-ql-webdsl, normalize-qls; compile-qls-webdsl)> ast;
    	result     := <pp-webdsl-string> webdsl-ast
    	
	builder-generate-js-html:
		(selected, position, ast, path, project-path) -> (filename, result)
		with
    	index-setup(|<language>, project-path);
    	task-setup(|project-path)
    with
    	filename := <guarantee-extension(|"html")> path;
    	result   := <ql-or-qls(resolve-all-imports;sort-by-dependencies; compile-ql-js-html, fail)> ast
