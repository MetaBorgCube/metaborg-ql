module ql/generation/binary-search

imports 

  include/QL
  runtime/index/-
  runtime/task/-
  editor-common.generated
  pp
  
rules
  
  builder-generate-example:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      index-setup(|<language>, project-path);
      task-setup(|project-path)
    with
      example  := <generate-binary-search; ?Form(fn, _)> 16
    ; result   := <pp-QL-string-debug> example  
    ; filename := $[[<dirname> path]/[fn].ql]

  generate-binary-search = 
    ?d; <generate-binary-search-form(|d)> (1, d)
    
  generate-binary-search-form(|d):
    (i, j) -> Form($[form[i]to[j]], q*) 
    where
      q* := <generate-binary-search-questions(|d)> 
      
  generate-binary-search-questions(|d):
    (i, j) -> res
    with
    	if ?(i, i) then
        res := [ Question($[q[i]], Label($["Is the answer [i]?"]), BoolTy()) ]
      else
        l   := <label> (i, j)
	    ; q   := Question(l, Label($["Is the answer between [i] and [j]?"]), BoolTy())
	    ; d'  := <div2> d
	    ; h   := <add> (i, d')
	    ; h'  := <dec> h
	    ; q1* := <generate-binary-search-questions(|d')> (i, h')
	    ; l1  := <label> (i, h')
	    ; q2* := <generate-binary-search-questions(|d')> (h, j)
	    ; l2  := <label> (h, j)
	    ; res := [q, q1*, Conditional(Not(Ref(l1)), q2*)]
      end
   
   label: (i, i) -> $[q[i]]
   label: (i, j) -> $[q[i]to[j]] where not(?(i, i))