module ql/generation/binary-search

imports 

  include/QL
  runtime/index/-
  runtime/task/-
  editor-common.generated
  pp
  
rules
  
  builder-generate-example:
    (selected, position, ast, path, project-path) -> None()
    with
      index-setup(|<language>, project-path)
    ; task-setup(|project-path)
    ; form* := <generate-binary-search>
    ; <map(write-file(|path))> form*
  
  write-file(|path):
    form@Form(fn, _) -> <id>
    with
      filename := $[[<dirname> path]/[fn].ql]
    ; content  := <strip-annos; pp-QL-string-debug> form
    ; file     := <fopen> (filename, "w")
    ; <fputs; fclose> (content, file);
      <refresh-workspace-file> filename
      
  generate-binary-search = 
    ![ Form("form", [<generate-binary-search-question(|True(), 512)> (1, 512)])
     | <generate-binary-search-forms(|True(), 512)> (1, 512) ]
    
  generate-binary-search-forms(|c, d):
    (i, j) -> res
    with
      if <?16> d then
        q   := <generate-binary-search-question(|c, d)> (i, j)
      ; res := [Form($[form[i]to[j]], [q])] 
      else
        l1  := <label> (i, j)
      ; d'  := <div2> d
      ; h   := <add> (i, d')
      ; h'  := <dec> h
      ; f1* := <generate-binary-search-forms(|Ref(l1), d')> (i, h')
      ; l2  := <label> (i, h')
      ; f2* := <generate-binary-search-forms(|And(Ref(l1), Not(Ref(l2))), d')> (h, j)
      ; res := [f1*, f2*]
      end
        
  generate-binary-search-question(|c, d):
    (i, j) -> res
    with
    	if ?(i, i) then
        res := Conditional(c, [ Question($[q[i]], Label($["Is the answer [i]?"]), BoolTy()) ])
      else
        l1  := <label> (i, j)
	    ; q   := Question(l1, Label($["Is the answer between [i] and [j]?"]), BoolTy())
	    ; d'  := <div2> d
	    ; h   := <add> (i, d')
	    ; h'  := <dec> h
	    ; if <?16> d' then
		    	res := Conditional(c, [q])
		    else
		      q1  := <generate-binary-search-question(|Ref(l1), d')> (i, h')
		    ; l2  := <label> (i, h')
		    ; q2  := <generate-binary-search-question(|And(Ref(l1), Not(Ref(l2))), d')> (h, j)
		    ; res := Conditional(c, [q, q1, q2])
	      end
      end
   
   label: (i, i) -> $[q[i]]
   label: (i, j) -> $[q[i]to[j]] where not(?(i, i))