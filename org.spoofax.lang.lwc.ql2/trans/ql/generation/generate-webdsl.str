module ql/generation/generate-webdsl

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	lib/editor-common.generated

	include/QL
	lib/webdsl/WebDSL
	lib/runtime/nabl/-
	
signature

	constructors
		
		String : STRING -> String
		Text   : STRING -> Text

rules // QL to WebDSL compilation
	
  compile-ql-webdsl: 
  	form@|[ form fid { question* } ]| -> 
	  |[ 
	  	module form 
	  	
	  	ent 
	  	
	  	entity User {
				name :: String (name)
				
			  x_formID -> x_formID
			}
			
			session sess {
	  		user -> User
			}
		  	
	  	def
	  	
		  page root() {
				var name := ""
				
				main() {
					horizontalForm() {
						controlGroup("Name: ") { input(name) }
						
				    formActions() {
				      submitlink start() [class="btn btn-primary"] { "Start questionaire" } " "
				    }
					}
				}
				
			  action start() {
			    sess.user := User { name := name, x_formID := x_formID {} };
			    return page1();
			  }
			}
			
			page finish() {
				main() {
					"Thank you for filling in the form"
				}
			}
	  ]|
	  where
	  	x_formID    := fid;
	  	ent         := <compile-ql-webdsl-entity> form;
	  	def         := <compile-ql-webdsl-page> form
	  	
rules // QL questions to WebDSL entity
	  
  compile-ql-webdsl-entity: 
  	|[ form fid { question* } ]| -> |[ entity x_formID { ebd* } ]|
  	where
  		x_formID := fid;
	  	ebd*     := <collect-all(compile-ql-webdsl-entity-part)> question*
	  	
  compile-ql-webdsl-entity-part: 
  	|[ qid : label t ]| -> |[ x_formID :: srt_type ]|
    where
  	  x_formID := qid;
  	  srt_type := <compile-ql-webdsl-type> t
  	  
  compile-ql-webdsl-entity-part: 
  	|[ qid : label t (expr) ]| -> |[ x_formID :: srt_type ]|
    where
  	  x_formID := qid;
  	  srt_type := <compile-ql-webdsl-type> t

rules // QL form to WebDSL page
	
  compile-ql-webdsl-page: 
  	|[ form fid { question* } ]| -> 
	  def |[
	    page page1() {
	    	main() {
		    	horizontalForm() {
		  		  elem_group*
		  		  
				    formActions() {
				      submitlink submit() [class="btn btn-primary"] { "Submit" } " "
				      submitlink finish() [class="btn btn-primary"] { "Finish" } " "
				    }
				  }
				  
				  action submit() {}
			  	action finish() { return finish(); }
		  	}
	  	}
	  ]|
    where
    	groups_length  := <length> question*;
	    groups_numbers := <upto; Tl> groups_length;
    	elem_group*    := <zip(compile-ql-webdsl-group(|groups_length))> (question*, groups_numbers)
  
  // Regular question
  compile-ql-webdsl-group(|length): 
  	(|[ qid : label t ]|, nr) -> result
  	with
  		x_id         := <compile-ql-webdsl-question-name> qid;
  		e_label      := <compile-ql-webdsl-exp> label;
			x_updates    := <compile-update-list(|length, nr)>;
			passign_all* := passign |[oninput=update(x_updates)]|;
  		switch !t
  			case ?DateTy() : !elem |[ controlGroup(e_label) { input(x_id) [passign_all*] } ]| // inputajax does not support dates
  			otherwise      : !elem |[ controlGroup(e_label) { inputajax(x_id) [passign_all*] } ]|
  		end => result
  		
	// Computed question
  compile-ql-webdsl-group(|length): 
  	(|[ qid : label t ( exp ) ]|, nr) -> elem |[ controlGroup(e_label) { output(e_typeExp) } ]|
  	where
  		e_label   := <compile-ql-webdsl-exp> label;
  		e_typeExp := <compile-ql-webdsl-exp> exp
  		
	// Condition
  compile-ql-webdsl-group(|length): 
  	(|[ if ( cond ) { q* } ]|, nr) -> elem |[ if (e_cond) { elem_group* } ]|
  	where
  		e_cond      := <compile-ql-webdsl-exp> cond;
  		elem_group* := <map(\q -> (q, nr)\; compile-ql-webdsl-group(|length))> q*

rules // QL types to WebDSL types
  
  compile-ql-webdsl-type: ql |[ boolean ]| -> webdsl |[ Bool   ]|
  compile-ql-webdsl-type: ql |[ string  ]| -> webdsl |[ String ]|
  compile-ql-webdsl-type: ql |[ integer ]| -> webdsl |[ Int    ]|
  compile-ql-webdsl-type: ql |[ date    ]| -> webdsl |[ Date   ]|
  compile-ql-webdsl-type: ql |[ decimal ]| -> webdsl |[ Float  ]|
  compile-ql-webdsl-type: ql |[ money   ]| -> webdsl |[ Float  ]|
  
rules // QL expressions to WebDSL expressions
  
  compile-ql-webdsl-exp = bottomup(try(compile-ql-webdsl-exp-part))
  
  compile-ql-webdsl-exp-part: Label(s) -> String(<try(un-double-quote)> s)
  compile-ql-webdsl-exp-part: Ref(qid) -> <compile-ql-webdsl-question-name> qid
  
  compile-ql-webdsl-exp-part: ql |[    !e    ]| -> webdsl:e |[    !e    ]|
  compile-ql-webdsl-exp-part: ql |[ e1 && e2 ]| -> webdsl:e |[ e1 && e2 ]|
  compile-ql-webdsl-exp-part: ql |[ e1 || e2 ]| -> webdsl:e |[ e1 || e2 ]|
  compile-ql-webdsl-exp-part: ql |[ e1 <  e2 ]| -> webdsl:e |[ e1 <  e2 ]|
  compile-ql-webdsl-exp-part: ql |[ e1 <= e2 ]| -> webdsl:e |[ e1 <= e2 ]|
  compile-ql-webdsl-exp-part: ql |[ e1 >  e2 ]| -> webdsl:e |[ e1 >  e2 ]|
  compile-ql-webdsl-exp-part: ql |[ e1 >= e2 ]| -> webdsl:e |[ e1 >= e2 ]|
  compile-ql-webdsl-exp-part: ql |[ e1 == e2 ]| -> webdsl:e |[ e1 == e2 ]|
  compile-ql-webdsl-exp-part: ql |[ e1 +  e2 ]| -> webdsl:e |[ e1 +  e2 ]|
  compile-ql-webdsl-exp-part: ql |[ e1 -  e2 ]| -> webdsl:e |[ e1 -  e2 ]|
  compile-ql-webdsl-exp-part: ql |[ e1 *  e2 ]| -> webdsl:e |[ e1 *  e2 ]|
  compile-ql-webdsl-exp-part: ql |[ e1 /  e2 ]| -> webdsl:e |[ e1 /  e2 ]|

rules // Utility
	
	compile-placeholder-name:
		num -> String(<conc-strings> ("q", <int-to-string> num))
	
	compile-update-list(|part_length, part_number):
		_ -> ListCreation(part_names)
		with
			part_numbers := <upto; Tl; remove-all(?part_number)> part_length;
			part_names   := <map(compile-placeholder-name)> part_numbers

rules
	
	compile-ql-webdsl-form-name:
		x_formID -> |[ sess.user.x_formID ]|
		
  compile-ql-webdsl-question-name:
  	qid -> |[ x_formID.x_questionID ]| 
	  with 
	  	fid          := <ql-question-form-name> qid;
	  	x_formID     := <compile-ql-webdsl-form-name> fid;
	  	x_questionID := qid
	
	ql-question-form-name:
		qid -> <nabl-uri; nabl-sub-uri(|NablNsForm()); nabl-uri-name> qid
