module syntax-expressions
language QL
start symbol Expr

test true literal [[ 
  true 
]] parse to True()

test false literal [[ 
  false 
]] parse to False()

test not over and priority [[ 
  !x && y 
]] parse to And(Not(Ref("x")), Ref("y"))

test not over or priority [[ 
  !x || y 
]] parse to Or(Not(Ref("x")), Ref("y"))
 
test not over or priority [[ 
  x || !y 
]] parse to Or(Ref("x"), Not(Ref("y")))

test add assoc [[ 
  x + y + z
 ]] parse to Add(Add(Ref("x"), Ref("y")), Ref("z"))
 
test add sub assoc [[ 
  x - y + z
]] parse to Add(Sub(Ref("x"), Ref("y")), Ref("z"))
 
test mul over add priority [[ 
  x + y * z
]] parse to Add(Ref("x"), Mul(Ref("y"), Ref("z")))
 
test mul over sub priority [[ 
  x - y * z
]] parse to Sub(Ref("x"), Mul(Ref("y"), Ref("z")))

test add and sub same priority [[
  x + y - z
]] parse to Sub(Add(Ref("x"), Ref("y")), Ref("z"))

test sub and add same priority [[
  x - y + z
]] parse to Add(Sub(Ref("x"), Ref("y")), Ref("z"))

test lt over add priority [[
  x < y + z 
]] parse to Lt(Ref("x"), Add(Ref("y"), Ref("z")))

test lt over and priority [[
  w < x && y < z 
]] parse to  And(
                Lt(Ref("w"), Ref("x"))
              , Lt(Ref("y"), Ref("z"))
             )
             
test and over or priority [[ 
  x || y && z
]] parse to Or(Ref("x"), And(Ref("y"), Ref("z")))

test operators combined  [[
  v1 + v2 - v3 * v4 / v5 == y
]] parse to 
    Eq(
      Sub(
        Add(Ref("v1"), Ref("v2"))
      , Div(Mul(Ref("v3"), Ref("v4")), Ref("v5"))
      )
    , Ref("y")
    )
    