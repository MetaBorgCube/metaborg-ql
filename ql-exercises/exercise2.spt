module syntax-expressions
language QL
start symbol Expr

test not [[
  !x
]] parse to Not(Ref("x"))

test and [[
	x && y
]] parse to And(Ref("x"), Ref("y"))

test or [[
  x || y
]] parse to Or(Ref("x"), Ref("y"))

test integer literal [[
  245 
]] parse to IntLit("245")

test greater than [[
	v1 > v2
]] parse to Gt(Ref("v1"), Ref("v2"))

test greater than or equals [[
	v1 >= v2
]] parse to Geq(Ref("v1"), Ref("v2"))

test less than [[
	v1 < v2
]] parse to Lt(Ref("v1"), Ref("v2"))

test less than or equals [[
	v1 <= v2
]] parse to Leq(Ref("v1"), Ref("v2"))

test equals [[
	v1 == v2
]] parse to Eq(Ref("v1"), Ref("v2"))

test not and [[ 
  !(x && y) 
]] parse to Not(And(Ref("x"), Ref("y")))

test or not [[ 
  (!x) || y 
]] parse to Or(Not(Ref("x")), Ref("y"))

test and mul [[ 
  x + (y * z) 
 ]] parse to Add(Ref("x"), Mul(Ref("y"), Ref("z")))
 
test sub mul [[ 
  x - (y * z) 
]] parse to Sub(Ref("x"), Mul(Ref("y"), Ref("z")))

test add sub [[
  (x + y) - z
]] parse to Sub(Add(Ref("x"), Ref("y")), Ref("z"))

test sub add [[
  x - (y + z)
]] parse to Sub(Ref("x"), Add(Ref("y"), Ref("z")))

test lt add [[
  x < (y + z)
]] parse to Lt(Ref("x"), Add(Ref("y"), Ref("z")))

test lt and [[
  (w < x) && (y < z)
]] parse to  And(
                Lt(Ref("w"), Ref("x"))
              , Lt(Ref("y"), Ref("z"))
             )
             
test or and [[ 
  x || (y && z) 
]] parse to Or(Ref("x"), And(Ref("y"), Ref("z")))

test operators combined  [[
  ((v1 + v2) - (v3 * (v4 / v5))) == y
]] parse to 
   Eq(
      Sub(
        Add(Ref("v1"), Ref("v2"))
      , Mul(Ref("v3"), Div(Ref("v4"), Ref("v5")))
      )
    , Ref("y")
    )
    