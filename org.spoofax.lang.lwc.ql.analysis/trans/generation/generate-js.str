module generation/generate-js

imports
	
  include/QL
  
  analysis/names
  
rules
  
  compile-ql-js-html:
  	form ->
  	$[<!DOCTYPE html>
			<html>
				<head>
					<meta charset="UTF-8">
					<title>Questionnaire - reference implementation</title>
					<link href="css/QL.css" rel="stylesheet" type="text/css" media="all" />
					<script type="text/javascript" src="http://code.jquery.com/jquery-latest.min.js"></script>
					<script type="text/javascript" src="http://code.jquery.com/ui/1.10.3/jquery-ui.min.js"></script>
					<script type="text/javascript" src="http://underscorejs.org/underscore-min.js"></script>
					<script type="text/javascript" src="http://www.decorplanit.com/plugin/autoNumeric-1.9.17.js"></script>
					<link href="css/jquery-ui.css" rel="stylesheet" type="text/css" media="all" />
					<script type="text/javascript">QLrt = {};</script>
					<script type="text/javascript" src="js/framework/util.js"></script>
					<script type="text/javascript" src="js/framework/structural-widgets.js"></script>
					<script type="text/javascript" src="js/framework/value-widgets.js"></script>
			
					<script type="text/javascript">
						[<compile-ql-js> form]
					</script>
				</head>
			<body>
			<div id="container">
			    <h1>Questionnaire</h1>
			
			    <div id="QL-content"></div>
			</div>
			</body>
			</html>
		]
       
  compile-ql-js: 
    form@Form(fid, question*) ->
    $<$(document).ready(function () {
        var form = new QLrt.FormWidget({ name: "<fid>", submitCallback: persist });
        
        
        <question-js*>
        $('#QL-content').append(form.domElement());
        form.activate();
    
        function persist(data) {
            localStorage['QL-persist'] = JSON.stringify(data);
        }
      });
    >
    with
      question-js* := <map(compile-ql-js-question)> question*

rules // Questions

  compile-ql-js-question:
    Conditional(True(), [question]) ->
    $<var <qid> = new QLrt.SimpleFormElementWidget({
        name        : "<qid>"
      , label       : "<label>"
      , valueWidget : <widget>
      }).appendTo(form);
      
    >
    with
      qid      := <compile-ql-js-qid> question
    ; label    := <compile-ql-js-label> question
    ; widget   := <compile-ql-js-widget> question

  compile-ql-js-question:
    Conditional(cond, [question]) ->
    $<var <qid> = new QLrt.ConditionalFormElementWidget({
        name        : "<qid>"
      , label       : "<label>"
      , valueWidget : <widget>
      , lazyValue   : new QLrt.LazyValue(
          function () {
            return [<cond-deps>];
          },
          function (<cond-deps>) {
            return <cond-expr>;
          }
        )
      }).appendTo(form);
      
    >
    where
      not(True() := cond)
    with
      qid       := <compile-ql-js-qid> question
    ; label     := <compile-ql-js-label> question
    ; widget    := <compile-ql-js-widget> question
    ; cond-dep* := <compile-ql-js-collect-dependencies> cond
    ; cond-deps := <separate-by(|", "); concat-strings> cond-dep*
    ; cond-expr := <compile-ql-js-exp> cond
      
rules // Widgets
  
  compile-ql-js-widget:
    Question(_, _, t) -> <compile-ql-js-widget-impl(|"")> t
    
  compile-ql-js-widget:
    Computed(_, _, TExpr(t, exp)) -> <compile-ql-js-widget-impl(|comp-val)> t
    with
      exp-dep* := <compile-ql-js-collect-dependencies> exp
    ; exp-deps := <separate-by(|", "); concat-strings> exp-dep*
    ; exp-expr := <compile-ql-js-exp> exp
    ; comp-val := 
      $<new QLrt.LazyValue(
          function () {
            return [<exp-deps>];
          },
          function (<exp-deps>) {
            return <exp-expr>;
          }
        )>
  
  compile-ql-js-widget-impl(|computed): BoolTy()   -> $<new QLrt.BooleanValueWidget(<computed>)>
  compile-ql-js-widget-impl(|computed): StringTy() -> $<new QLrt.StringValueWidget(<computed>)>
  compile-ql-js-widget-impl(|computed): IntTy()    -> $<new QLrt.IntegerValueWidget(<computed>)>
  compile-ql-js-widget-impl(|computed): DateTy()   -> $<new QLrt.DateValueWidget(<computed>)>
  compile-ql-js-widget-impl(|computed): FloatTy()  -> $<new QLrt.DecimalValueWidget(<computed>)>
  compile-ql-js-widget-impl(|computed): MoneyTy()  -> $<new QLrt.MoneyValueWidget(<computed>)>
  
rules // Expressions
  
  compile-ql-js-exp = bottomup(where(is-string) <+ compile-ql-js-exp-part)
  
  compile-ql-js-exp-part: True()   -> "true"
  compile-ql-js-exp-part: False()  -> "false"
  compile-ql-js-exp-part: Ref(qid) -> qid
  compile-ql-js-exp-part: Not(e)   -> ${!{e}}
  
rules // Projections
  
  compile-ql-js-collect-dependencies = collect-all(?Ref(<id>))
  
	compile-ql-js-qid: Question(qid, _, _) -> qid
  compile-ql-js-qid: Computed(qid, _, _) -> qid
  
  compile-ql-js-label: Question(_, label, _) -> <compile-ql-js-label-unquote> label
  compile-ql-js-label: Computed(_, label, _) -> <compile-ql-js-label-unquote> label
	compile-ql-js-label-unquote: Label(label-str) -> <un-double-quote> label-str
