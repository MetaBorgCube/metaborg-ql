module analysis/names

imports
  lib/runtime/nabl/-
  lib/runtime/task/-
  lib/runtime/properties/-
  lib/runtime/types/-
  lib/runtime/editor/-


rules

  nabl-get-scope =
    ?Form(f, _)
    ; ![NablNsQuestion()]

  nabl-get-name :
    Form(f, _) -> f

  nabl-name-apply(s) =
    Form(s, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Form(f, _)
    ; origin-track-forced(
        Form(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsForm()
          , Unique()
          , Current()
          , [NablNsQuestion()]
          , []
          )
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-get-name :
    Question(q, l, t) -> q

  nabl-name-apply(s) =
    Question(s, id, id)

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Question(q, l, t)
    ; origin-track-forced(
        Question(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsQuestion()
          , NonUnique()
          , Current()
          , []
          , []
          )
        , id
        , id
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?Question(q, l, t)
    ; Question(
        nabl-store-props(
        | partition__
        , [Prop(Type(), t, [])]
        )
      , id
      , id
      )
    ; fail

  nabl-get-name :
    Computed(q, l, TExpr(t, _)) -> q

  nabl-name-apply(s) =
    Computed(s, id, TExpr(id, id))

  nabl-def-site(child-uris__, sibl-uris__, implicits__|lang__, partition__, uniques__, uri__, states__) =
    ?Computed(q, l, TExpr(t, _))
    ; origin-track-forced(
        Computed(
          nabl-def(
            ?c-uri1__
          , ?s-uri1__
          | lang__
          , partition__
          , uniques__
          , uri__
          , uri__
          , NablNsQuestion()
          , NonUnique()
          , Current()
          , []
          , []
          )
        , id
        , origin-track-forced(TExpr(id, id)|)
        )
      |
      )
    ; match(child-uris__|c-uri1__)
    ; match(sibl-uris__|s-uri1__)
    ; match(implicits__|[])

  nabl-prop-site(|lang__, partition__, uris__, states__, implicits__) =
    ?Computed(q, l, TExpr(t, _))
    ; Computed(
        nabl-store-props(
        | partition__
        , [Prop(Type(), t, [])]
        )
      , id
      , TExpr(id, id)
      )
    ; fail

  nabl-get-name :
    Ref(q) -> q

  nabl-name-apply(s) =
    Ref(s)

  nabl-use-site(|lang__, partition__, uniques__, uris__, states__) =
    ?Ref(q)
    ; origin-track-forced(
        Ref(
          nabl-use(
          | lang__
          , partition__
          , uniques__
          , uris__
          , [ UseCandidate(
                NablNsQuestion()
              , []
              , Current()
              , True()
              , []
              )
            ]
          )
        )
      |
      )


imports
  include/QL


signature
  constructors
    NablNsForm     : Namespace
    NablNsQuestion : Namespace


signature
  constructors
    NablProp_dependency : Property


rules

  nabl-custom-properties(add-properties) =
    ![NablProp_dependency()] ; add-properties

  dependency-is(|task*) =
    nabl-prop-calc(|task*, [])

  dependency-task(|task*) =
    get-or-create-property-task(|task*, NablProp_dependency())

  dependency-is(|task*, dep*) =
    nabl-prop-calc(|task*, dep*)

  dependency-list(|task*) =
    nabl-prop-list(|task*, [])

  dependency-list(|task*, dep*) =
    nabl-prop-list(|task*, dep*)

  dependency-lookup(|task*) =
    nabl-prop-lookup(|NablProp_dependency(), task*, [])

  dependency-lookup(|task*, dep*) =
    nabl-prop-lookup(|NablProp_dependency(), task*, dep*)

  dependency-match(|task*, expected) =
    nabl-prop-match(
    | NablProp_dependency()
    , task*
    , Eq()
    , expected
    )

  dependency-match(|task*, relation, expected) =
    nabl-prop-match(|NablProp_dependency(), task*, relation, expected)

  create-dependency-task(|task*) =
    fail

  get-dependency =
    get-property(|NablProp_dependency())

  store-dependency(|partition, prop) =
    nabl-store-prop(
    | partition
    , Prop(NablProp_dependency(), prop, [])
    )

  create-property-task(|partition, kind):
    term -> <create-dependency-task(|partition)> term
    where NablProp_dependency() := kind