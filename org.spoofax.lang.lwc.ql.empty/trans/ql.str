module ql

imports
  
  libstratego-lib
  libstratego-gpp
  libstratego-aterm
  include/QL
  editor/QL-Outliner
  lib/editor-common.generated
  lib/runtime/index/-
  lib/runtime/nabl/-
  lib/runtime/properties/-
  lib/runtime/relations/-
  lib/runtime/types/-
  lib/runtime/task/-
  lib/runtime/analysis/-
  lib/runtime/editor/-
  
  pp

rules // Analysis
  
  editor-analyze = analysis-default-editor
  
  analysis-single-default-interface = 
    analysis-single-default(id, id, id|<language>)
  analysis-multiple-default-interface = 
    analysis-multiple-default(parse-file <+ !(), id, id, id|<language>, <project-path>)
  
  editor-save = analysis-save-default(|<language>)

rules // Editor services
  
  // Resolves a reference when the user control-clicks or presses F3 in the editor.
  editor-resolve:
    (node, position, ast, path, project-path) -> definition
    where
      definition := <analysis-resolve(|<language>, project-path)> node

  // Returns "hover help" information for a particular node in the editor.
  // For references, this rule is invoked using the resolved term.
  editor-hover:
    (target, position, ast, path, project-path) ->
      <get-editor-properties(pp-QL-string |<language>, project-path);properties-to-html>target

  // Gathers the properties for the properties view.
  editor-properties:
    (target, position, ast, path, project-path) ->
      <get-all-editor-properties(pp-QL-string |<language>, project-path)>target

  // Completes an identifier when the user presses control-space
  // (the completion identifier in the AST provides additional context information)
  editor-complete:
    (node, position, ast, path, project-path) -> proposals
    where
      proposals := <analysis-propose-completions(|<language>, project-path)> ast
  
  // Formats the program using a pretty printer    
  editor-format:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      ext      := <get-extension> path;
      filename := <guarantee-extension(|$[pp.[ext]])> path;
      result   := <rename-form(|"Formatted"); pp-QL-string-debug> selected

rules // Debugging
  
  // Prints the abstract syntax ATerm of a selection.
  debug-show-aterm:
    (selected, position, ast, path, project-path) -> (filename, result)
    with
      filename := <guarantee-extension(|"aterm")> path;
      result   := selected

signature constructors
  
  Form : ID * List(Question) -> Start
  
rules
  
  rename-form(|append) = Form(!$[[<id>][append]], id)
