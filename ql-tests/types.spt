module types
language QL
start symbol Start

test type of true literal [[
	form f {
		if([[true]]) {}
	}
]] run get-type to BoolTy()

test type of true literal [[
	form f {
		if([[false]]) {}
	}
]] run get-type to BoolTy()


test condition must be boolean [[
	form f {
		problems : "Does your car have problems?" boolean
		if(problems) {}
	}
]] 0 errors

test condition must be boolean [[
	form f {
		age : "What is your age?" integer
		if([[age]]) {}
	}
]] 1 error


test type of question reference [[
	form f {
		problems : "Does your car have problems?" boolean
		if([[problems]]) {}
	}
]] run get-type to BoolTy()


test type of numeric multiplication : integer [[
	form f {
		age     : "What is your age?" integer
		noses   : "How many noses do you have?" integer
		val     : "Nonsense value" integer([[age * noses]])
	}
]] run get-type to IntTy()

test type of numeric addition : decimal [[
	form f {
		age  : "What is your age?" integer
		size : "What is your size?" decimal
		val  : "Nonsense value" decimal([[age + size]])
	}
]] run get-type to FloatTy()


test disallow money - numeric [[
	form f {
		moneynow : "How much money did you have in 2013?" money
		age      : "What is your age?" integer
		val      : "Taxes" integer([[moneynow - age]])
	}
]] 2 errors // One error to disallow subtraction, one error for the type mismatch.

test disallow money + numeric [[
	form f {
		moneynow : "How much money did you have in 2013?" money
		age      : "What is your age?" integer
		val      : "Taxes" integer([[moneynow + age]])
	}
]] 2 errors // One error to disallow addition, one error for the type mismatch.

test allow money * numeric [[
	form f {
		moneynow : "How much money did you have in 2013?" money
		mod      : "Monies modifier" decimal
		val      : "Taxes" money([[moneynow * mod]])
	}
]] run get-type to MoneyTy()

test allow money / numeric [[
	form f {
		moneynow : "How much money did you have in 2013?" money
		mod      : "Monies modifier" decimal
		val      : "Taxes" money([[moneynow / mod]])
	}
]] run get-type to MoneyTy()

test disallow numeric / money [[
	form f {
		moneynow : "How much money did you have in 2013?" money
		age      : "What is your age?" integer
		val      : "Taxes" integer([[age / moneynow]])
	}
]] 2 errors // One error to disallow dividing, one error for the type mismatch.
