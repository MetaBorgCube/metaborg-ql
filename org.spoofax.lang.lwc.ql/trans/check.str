module check

imports
	libstratego-lib
	include/QL
	lib/editor-common.generated
	lib/index-library.generated
	lib/analysis-library.generated
	lib/analysis-library-internal.generated
	lib/nbl-library.generated

	types
	dependencies
	
rules // generic
	
	constraint-warning = fail
	
	constraint-note = fail
	
rules // expressions
	
	constraint-error =
		?|[ !e ]|; 
		<type-error(eq)> (e, BoolTy())
	
	constraint-error =
		( ?|[ e1 && e2 ]| + ?|[ e1 || e2 ]| );
		<filter(type-error(eq))> [(e1, BoolTy()), (e2, BoolTy())]
	
	constraint-error =
		(?|[ e1 < e2 ]| + ?|[ e1 <= e2 ]| + ?|[ e1 > e2 ]| + ?|[ e1 >= e2 ]|);
		<filter(type-error(is-comparable|"compared"))> [e1, e2];
		if ?[] then 
			<type-error(lub)> (e2, <type-of> e1)
		end
	
	constraint-error =
		?|[ e1 == e2 ]|;
		<type-error(lub)> (e2, <type-of> e1)
		
	constraint-error =
		(?|[ e1 + e2 ]| + ?|[ e1 - e2 ]|);
		<filter(type-error(is-addable|"added or subtracted"))> [e1, e2];
		if ?[] then 
			<type-error(lub)> (e2, <type-of> e1)
		end
		
	constraint-error =
		?|[ e1 * e2 ]|;
		if <type-of> e1 => MoneyTy() then
			<type-error(lub)> (e2, FloatTy())
		else if <type-of> e2 => MoneyTy() then
			<type-error(lub)> (e1, FloatTy())
		else
			<filter(type-error(is-numeric|"multiplied"))> [e1, e2];
			if ?[] then
				<type-error(lub)> (e2, <type-of> e1)
			end
		end end

	constraint-error =
		?|[ e1 / e2 ]|;
		if <type-of> e1 => MoneyTy() then
			<type-error(lub)> (e2, FloatTy())
		else
			<filter(type-error(is-numeric|"divided"))> [e1, e2];
			if ?[] then
				<type-error(lub)> (e2, <type-of> e1)
			end
		end

rules // questions and groups
	
	constraint-error: |[ type (exp) ]| 					 -> <type-error(lub)> (exp, type)
	constraint-error: |[ if (c) { question* } ]| -> <type-error(eq)> (c, BoolTy())

	constraint-warning =
		(?|[ qid : label type ]| + ?|[ qid : label texpr ]|);
		<get-labels> qid; 
		not(?[_]);
		!(label, $[Question has different labels.]) 
	
	constraint-error =
		(?|[ qid : label type ]| + ?|[ qid : label texpr ]|);
		<get-dependent-questions> qid;
		get-all-dependent-questions;
		fetch(?qid);
		!(qid, $[Question has cyclic dependency on itself.])
	
	constraint-error =
		(?|[ qid : label type ]| + ?|[ qid : label texpr ]|);
		<get-defined-types> qid;
		not(?[_]);
		!(<!type <+ !texpr>, $[Question has incompatible types across multiple definitions])
	
rules // helpers
	
	type-error(s): 
		(e, expected) -> (e, $[Expression is of type [type1] which does not comply to [type2].])
		where 
			<type-of> e => actual; 
			<not(s)> (actual, expected);
			<pp-ql-string> actual => type1;
			<pp-ql-string> expected => type2
			
	type-error(s|quality): 
		e -> (e, $[Expression is of type [type] which cannot be [quality].])
		where 
			<type-of> e => actual; 
			<not(s)> actual;
			<pp-ql-string> actual => type
			