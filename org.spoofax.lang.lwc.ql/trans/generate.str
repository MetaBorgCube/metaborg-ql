module generate

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	lib/editor-common.generated
	lib/compilation-library

	include/QL
	lib/webdsl/WebDSL
	
signature

	constructors
		
		String : STRING -> String
		Text   : STRING -> Text

rules // QL to WebDSL compilation
	
  compile-ql: 
  	form@|[ form fid { question* } ]| -> 
	  |[ 
	  	module form 
	  	
	  	ent 
	  	
	  	entity User {
				name :: String (name)
				
			  x_formID -> x_formID
			}
			
			session sess {
	  		user -> User
			}
		  	
	  	tdef
	  	
		  page root() {
				var name := ""
				
				main() {
					horizontalForm() {
						controlGroup("Name: ") { input(name) }
						
				    formActions() {
				      submitlink start() [class="btn btn-primary"] { "Start questionaire" } " "
				    }
					}
				}
				
			  action start() {
			    sess.user := User { name := name, x_formID := x_formID {} };
			    return page1();
			  }
			}
			
			page page1() {
				main() {
					call
				}
			}
			
			page finish() {
				main() {
					"Thank you for filling in the form"
				}
			}
	  ]|
	  where
	  	x_formID    := fid;
	  	x_templName := <conc-strings> ("show", fid);
	  	ent         := <compile-ql-entity> form;
	  	tdef        := <compile-ql-template> form;
	  	call        := call |[ x_templName(sess.user.x_formID) ]|
	  	
rules // QL questions to WebDSL entity
	  
  compile-ql-entity: 
  	|[ form fid { question* } ]| -> |[ entity x_formID { ebd* } ]|
  	where
  		x_formID := fid;
	  	ebd*     := <collect-all(compile-ql-entity-part)> question*
	  	
  compile-ql-entity-part: 
  	|[ qid : label t ]| -> |[ x_formID :: srt_type ]|
    where
  	  x_formID := qid;
  	  srt_type := <compile-ql-type> t
  	  
  compile-ql-entity-part: 
  	|[ qid : label t (expr) ]| -> |[ x_formID :: srt_type ]|
    where
  	  x_formID := qid;
  	  srt_type := <compile-ql-type> t

rules // QL questions to WebDSL template
	
  compile-ql-template: 
  	|[ form fid { question* } ]| -> 
	  tdef |[
	    define x_templName(form : x_formID) {
	    	horizontalForm() {
	  		  elem_group*
	  		  
			    formActions() {
			      submitlink submit() [class="btn btn-primary"] { "Submit" } " "
			      submitlink finish() [class="btn btn-primary"] { "Finish" } " "
			    }
			  }
			  
			  action submit() {
			    form.save();
			  }
			  
		  	action finish() {
			    form.save();
			    return finish();
			  }
	  	}
	  ]|
    where
    	x_formID    := fid;
    	x_templName := <conc-strings> ("show", fid);
    	elem_group* := <map(compile-ql-template-part)> question*
  
  compile-ql-template-part: 
  	|[ qid : label t ]| -> elem |[ controlGroup(e_label) { input(form.x_id) } ]|
  	where
  		x_id    := qid;
  		e_label := <compile-ql-exp> label
  		
  compile-ql-template-part: 
  	|[ qid : label t ( exp ) ]| -> elem |[ controlGroup(e_label) { output(e_typeExp) } ]|
  	where
  		e_label   := <compile-ql-exp> label;
  		e_typeExp := <compile-ql-exp> exp
  		
  compile-ql-template-part: 
  	|[ if ( cond ) { q* } ]| -> elem |[ if (e_cond) { elem_question* } ]|
  	where
  		e_cond         := <compile-ql-exp> cond;
  		elem_question* := <map(compile-ql-template-part)> q*

rules // QL types to WebDSL types
  
  compile-ql-type: ql |[ boolean ]| -> webdsl |[ Bool   ]|
  compile-ql-type: ql |[ string  ]| -> webdsl |[ String ]|
  compile-ql-type: ql |[ integer ]| -> webdsl |[ Int    ]|
  compile-ql-type: ql |[ date    ]| -> webdsl |[ Date   ]|
  compile-ql-type: ql |[ decimal ]| -> webdsl |[ Float  ]|
  compile-ql-type: ql |[ money   ]| -> webdsl |[ Float  ]|
  
rules // QL expressions to WebDSL expressions
  
  compile-ql-exp = bottomup(try(compile-ql-exp-part))
  
  compile-ql-exp-part: Label(s) -> String(<try(un-double-quote)> s)
  compile-ql-exp-part: Ref(qid) -> |[ form.x ]| where x := qid
  
  compile-ql-exp-part: ql |[    !e    ]| -> webdsl:e |[    !e    ]|
  compile-ql-exp-part: ql |[ e1 && e2 ]| -> webdsl:e |[ e1 && e2 ]|
  compile-ql-exp-part: ql |[ e1 || e2 ]| -> webdsl:e |[ e1 || e2 ]|
  compile-ql-exp-part: ql |[ e1 <  e2 ]| -> webdsl:e |[ e1 <  e2 ]|
  compile-ql-exp-part: ql |[ e1 <= e2 ]| -> webdsl:e |[ e1 <= e2 ]|
  compile-ql-exp-part: ql |[ e1 >  e2 ]| -> webdsl:e |[ e1 >  e2 ]|
  compile-ql-exp-part: ql |[ e1 >= e2 ]| -> webdsl:e |[ e1 >= e2 ]|
  compile-ql-exp-part: ql |[ e1 == e2 ]| -> webdsl:e |[ e1 == e2 ]|
  compile-ql-exp-part: ql |[ e1 +  e2 ]| -> webdsl:e |[ e1 +  e2 ]|
  compile-ql-exp-part: ql |[ e1 -  e2 ]| -> webdsl:e |[ e1 -  e2 ]|
  compile-ql-exp-part: ql |[ e1 *  e2 ]| -> webdsl:e |[ e1 *  e2 ]|
  compile-ql-exp-part: ql |[ e1 /  e2 ]| -> webdsl:e |[ e1 /  e2 ]|
