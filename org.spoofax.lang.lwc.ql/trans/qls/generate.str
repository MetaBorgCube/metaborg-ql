module qls/generate

imports
	
	libstratego-lib
	libstratego-gpp
	libstratego-aterm
	lib/editor-common.generated
	lib/analysis-library

	include/QL
	lib/webdsl/WebDSL

  generate
  store
	
rules
	
	compile-qls: 
		QLS(_, page*) ->
		webdsl |[
			x
			
			//globals
			
			//p1
			//p2
			//...
			
			//root page
		]|
		where
			fref* := <mapconcat(qls-page-forms); make-set> page*;
			x     := <debug; map(compile-qls-entity); debug> fref*
			// use ql compiler to create entities for referenced forms
			// create globals for referenced forms
			// compile each page
			// create a root page that navigates to the first page

  qls-page-forms:
  	//|[ page str for fref* { pp* } ]| -> fref*
  	Page(_, fref*, _) -> fref*
  	
  compile-qls-entity:
  	FormRef(x_formID) -> |[ entity x_formID { ebd* } ]|
  	where
  	  question* := <debug; index-get-data-all(|AST()); debug> x_formID;
	  	ebd*      := <collect-all(compile-ql-entity-part)> question*
	
	compile-qls-page:
		|[ page str1 for fref* { pp* } ]| -> 
		webdsl |[ 
			page page1() {
				
			}
		]|
	  where
	  	id
	  	// create page name
	  	// for each part
	  	//   if it is a question reference, compile it
	  	//   if it is a section/subsection, compile it to a webdsl section/subsection and nest question references inside it
	  	
	compile-qls-part:
		|[ qid { s* } ]| -> <id>
		where
			id
			// get label, type and condition from the index
			// if there is a condition, compile that first
			// compile question, nested into the condition if needed
			
			