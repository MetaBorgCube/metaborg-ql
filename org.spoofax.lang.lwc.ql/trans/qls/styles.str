module qls/styles

imports
	lib/index-library
	lib/analysis-library
	include/QL
	utils
	qls/types
	qls/defaults
	qls/store
	dependencies
	lib/editor-common.generated
	
rules
	/*
	* Query dependencies of style (SHALLOW)
	*/
	
	qls-get-dependent-styles =
		index-lookup;
		index-get-data-all(|Dependencies());
		unions;
		filter(?StyleRef(<id>))
	
	
	/*
	* Query dependencies of style (DEEP)
	*/
	qls-get-all-dependent-styles =
		(is-list <+ MkSingleton);
		transitive-closure(qls-get-dependent-styles)
	
	/*
	* Succeed if style has circular dependency (DEEP)
	*/
	qls-has-circular-dependency-style =
		?sid;
		qls-get-dependent-styles;
		qls-get-all-dependent-styles;
		fetch(?sid)

rules
	/*
	* Style linearization and concretization.
	* Basically recursively expand StyleRefs
	*/

	qls-make-concrete-style =
		?StyleRef(<id>);
		index-lookup;
		index-get-data(|StyleDefinitions())
	
	qls-make-all-concrete-style =
		map(try(not(?StyleRef(<id>);qls-has-circular-dependency-style);qls-make-concrete-style;qls-make-all-concrete-style));
		flatten-list
	
rules
	
	is-same-style =
		not(is-same-style-use);
		(
			?(Font(_),Font(_)) +
			?(Color(_), Color(_)) +
			?(|[ widget = widge0 ]|, |[ widget = widge1 ]|) +
			?(|[ t widget = widge0 ]|, |[ t widget = widge1 ]|)
		)
	
	is-same-style-use = ?(StyleRef(a), StyleRef(a))

strategies
	/* Normalization entry point */
	qls-normalize =
		qls-normalize-styles-top;
		qls-normalize-pages-top
		// TODO why does this not work?
		// ;qls-add-one-rest-ref;debug(!"OUT...")

rules
	/* Normalize all SimpleRef and StyleRef.
	* - all StyleRefs are made concrete and simplified
	* - all SimpleRefs become StyleRef
	*/
	qls-normalize-styles-top = alltd(qls-normalize-styles)
	
	qls-normalize-styles:
		|[ qid { style0* }]| -> |[ qid { style1* }]|
		where
			qls-type-of => q-ty;
			qls-default-style(|q-ty) => def-style
		where
			<qls-make-all-concrete-style> style0*;
			<conc> (def-style, <id>);
			filter(is-typed-widget;untype-widget(|q-ty) <+ not(is-typed-widget));
			foldr(![], qls-add-style) => style1*			
	
	qls-normalize-styles:
		SimpleRef(qid) -> |[qid { style* }]|
		where
			qls-type-of => q-ty;
			qls-default-style(|q-ty) => style*


	is-typed-widget = ?TypedWidget(_, _)
	untype-widget(|ty): TypedWidget(ty, w) -> w 

	qls-add-style:
		(sty, styles) -> [sty|styles]
		where not(elem(is-same-style))
	
	qls-add-style:
		(sty, styles) -> styles
		where elem(is-same-style)

rules
	/* Normalize pages:
	* - add dependent questions where needed
	* - add all unneeded questions on last page of form
	*/
	qls-normalize-pages-top = alltd(qls-add-ref-deps)
	
	qls-add-ref-deps:
		|[ page str for fref* { pagepart* } ]| -> |[ page str for fref* { pagepart1* } ]|
		where
			<map(qls-add-ref-deps);flatten-list> pagepart* => pagepart1* 
	
	qls-add-ref-deps:
		|[ section str { secpart* }]| -> |[ section str { secpart1* }]|
		where
			<map(qls-add-ref-deps);flatten-list> secpart* => secpart1*
			
	qls-add-ref-deps:
		|[ subsection str { ssecpart* }]| -> |[ subsection str { ssecpart1* }]|
		where
			<map(qls-add-ref-deps);flatten-list> ssecpart* => ssecpart1*
			
	qls-add-ref-deps:
		|[ qid { styles* } ]| -> [dep-refs*, <id>]
		where
			<get-all-dependencies> qid => raw-deps*;
			<qls-form-of-question> qid => form;
			<qls-questions-of-form> form => q-refs*; 
			<diff> (raw-deps*, q-refs*) => deps*;
			<map(qls-qid-to-ref)> deps* => dep-refs*;
			<map(qls-store-question-ref)> dep-refs*

	qls-qid-to-ref:
		qid -> <qls-normalize-styles> SimpleRef(qid)

rules // add missing references to questions one at a time
	
	// add one question to a form which is missing from pages
	qls-add-one-rest-ref:
		QLS(sdefs, pages*) -> QLS(sdefs, pages')
		where
			<collect-all(?FormRef(<id>));make-set> pages* => forms*;
			<fetch-elem(qls-form-has-unreffed-questions)> forms* => form;
			<reverse;one(qls-page-add-one-rest-ref(|form));reverse> pages* => pages'
	
	qls-page-add-one-rest-ref(|frm):
		|[ page str for fref* { pagepart* } ]| -> |[ page str for fref* { pagepart* pagepart1 } ]|
		where
			<qls-get-form-unreffed-questions> frm => [unref|_];
			<index-get-data(|AST());get-question-id;qls-qid-to-ref> Def(unref) => pagepart1;
			<qls-store-question-ref> pagepart1
			
	qls-form-has-unreffed-questions:
		frm -> frm
		where
			qls-get-form-unreffed-questions;
			not(?[])
	
	
	qls-get-form-unreffed-questions =
		?frm;
		<index-get-data-all(|Questions())> frm => q-defs*;
		<index-get-data-all(|ReferredQuestions())> frm => q-refs*;
		<diff> (q-defs*, q-refs*)
	
	get-question-id:
		Conditional(_, [Computed(qid, _, _)]) -> qid
		
	get-question-id:
		Conditional(_, [Question(qid, _, _)]) -> qid
	


	