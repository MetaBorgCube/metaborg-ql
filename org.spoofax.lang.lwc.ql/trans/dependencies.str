module dependencies

imports
	index-library.generated
	analysis-library.generated
	include/QL
	names
	desugar
	
signature constructors
	
	Label				: DefDataKind
	Condition		: DefDataKind
	Deps        : DefDataKind
	CoreDeps		: DefDataKind
	
rules
	
	analyze-dependencies: 
		|[ form fid { question* } ]|-> <filter(analyze-dependencies)> question*
			
	analyze-dependencies: 
		|[ if (c) { qid : label type } ]|	-> <index-add-all> [ ldata, cdata, ddata, cddata ]
		where 
			uri    := <index-uri> qid ;
			ldata  := DefData(uri, Label(), label) ;
			c'     := <innermost(normalize); innermost(sort-literals); innermost(normalize)> c;
			cdata  := DefData(uri, Condition(), c') ; 
			ddata  := DefData(uri, Deps(), <collect-questions> c);
			cddata := DefData(uri, CoreDeps(), <collect-questions> c') 
	
	analyze-dependencies: 
	|[ if (c) { qid : label texpr } ]|	-> <index-add-all> [ ldata, cdata, ddata, cddata ]
	where 
		uri    := <index-uri> qid ;
		ldata  := DefData(uri, Label(), label) ;
		c'     := <innermost(normalize); innermost(sort-literals); innermost(normalize)> c;
		cdata  := DefData(uri, Condition(), c') ; 
		ddata  := DefData(uri, Deps(), <collect-questions> c);
		cddata := DefData(uri, CoreDeps(), <collect-questions> c') 
			
	collect-questions = collect-all(?Ref(<id>), union)
	
rules
	
	get-labels = 
		index-lookup;
		index-get-data-all(|Label());
		make-set
	
	get-conditions = 
		index-lookup;
		index-get-data-all(|Condition());
		make-set
			
	get-defined-types = 
		index-lookup;
		index-get-data-all(|Type());
		make-set

	get-dependencies =
		index-lookup;
		index-get-data-all(|Deps());
		unions
		
	get-core-dependencies =
		index-lookup;
		index-get-data-all(|CoreDeps());
		unions
		
	get-all-dependencies = 
		(is-list <+ MkSingleton);
		transitive-closure(get-dependencies)
	
	get-all-core-dependencies = 
		(is-list <+ MkSingleton);
		transitive-closure(get-core-dependencies)

	depends-on: (qid1, qid2) -> <get-all-dependencies; fetch-elem(?qid2)> qid1
	
	sort-questions = sort-list(LSort(depends-on))
		
rules
	
	transitive-closure(s) = transitive-closure(s|[])
	
	transitive-closure(s|accu): []		-> accu
	transitive-closure(s|accu): [h|t]	-> result
		where
			if <elem> (h, accu) then
				result := <transitive-closure(s|accu)> t
			else
				result := <conc; transitive-closure(s|[h|accu])> (<s> h, t)
			end
			
			
	index-add-all = index-add-all(|<index-get-current-file>)
	
	 
