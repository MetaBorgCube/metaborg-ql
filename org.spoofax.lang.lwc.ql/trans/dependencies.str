module dependencies

imports
	lib/index-library
	lib/analysis-library
	include/QL
	names
	desugar
	utils
	
signature constructors
	
	Label				: DefDataKind
	Condition		: DefDataKind
	Deps        : DefDataKind
	CoreDeps		: DefDataKind
	
rules
	
	analyze-dependencies: 
		|[ form fid { question* } ]|-> <filter(analyze-dependencies)> question*
			
	analyze-dependencies: 
		|[ if (c) { qid : label type } ]|	-> <index-add-all> [ ldata, cdata, ddata, cddata ]
		where 
			uri    := <index-uri> qid ;
			ldata  := DefData(uri, Label(), label) ;
			c'     := <innermost(normalize); innermost(sort-literals); innermost(normalize)> c;
			cdata  := DefData(uri, Condition(), c') ; 
			ddata  := DefData(uri, Deps(), <collect-questions> c);
			cddata := DefData(uri, CoreDeps(), <collect-questions> c') 
	
	analyze-dependencies: 
	|[ if (c) { qid : label texpr } ]|	-> <index-add-all> [ ldata, cdata, ddata, cddata ]
	where 
		uri    := <index-uri> qid ;
		ldata  := DefData(uri, Label(), label) ;
		c'     := <innermost(normalize); innermost(sort-literals); innermost(normalize)> c;
		cdata  := DefData(uri, Condition(), c') ; 
		ddata  := DefData(uri, Deps(), <collect-questions> (c, texpr));
		cddata := DefData(uri, CoreDeps(), <collect-questions> (c', texpr)) 
			
	collect-questions = collect-all(?Ref(<id>), union)
	
rules
	
	get-labels = 
		index-lookup;
		index-get-data-all(|Label());
		make-set
	
	get-conditions = 
		index-lookup;
		index-get-data-all(|Condition());
		make-set
			
	get-defined-types = 
		index-lookup;
		index-get-data-all(|Type());
		make-set

	get-dependencies =
		index-lookup;
		index-get-data-all(|Deps());
		unions
		
	get-core-dependencies =
		index-lookup;
		index-get-data-all(|CoreDeps());
		unions
		
	get-all-dependencies = 
		(is-list <+ MkSingleton);
		transitive-closure(get-dependencies)
	
	get-all-core-dependencies = 
		(is-list <+ MkSingleton);
		transitive-closure(get-core-dependencies)

	question-name: |[ if (c) { qid : label type  } ]| -> qid
	question-name: |[ if (c) { qid : label texpr } ]| -> qid
	
	depends-on: 
		(q1, q2) -> <get-all-dependencies; fetch-elem(?qid2)> qid1
		where
			<question-name> q1 => qid1;
			<question-name> q2 => qid2
			
	sort-questions:
		q* -> <sort-list(LSort(depends-on))> q*

	/*
	* Calculate all the question inversion-pairs present in the given set of question ids.
	* The set of questions need not contain all dependencies. Inversion are not given for missing questions. 
	* 
	* @type List(ID) -> List(ID)
	* @example
	*		Say that question C depends on B and A, and that question D depends on C.
	*		- [A,B,C,D] -> [] (everything in order)
	*		- [B,A,C,D] -> []
	*		- [A,C,D] -> [].
	*		- [A,C,B,D] -> [ (C,B) ] (B should preceed C)
	*		- [A,D,C,B] -> [(D,C), (C,B)] (C preceed D, B preceed C)
	*/
	// TODO
	sort-question-ids = warn-msg(|"Strategy sort-question-ids is NOT IMPLEMENTED");?[a,b|_];![(b,a)]

		
	sort-form: 
		|[form fid { question1* } ]| -> |[form fid { question2* } ]|
		where
			question2* := <sort-questions> question1*
		
rules
	
	get-defined-types = 
		index-lookup;
		index-get-data-all(|Type());
		make-set
	
	 
