module utils

imports
	
	lib/index-library

rules // set transitive closure
	
	transitive-closure(s) = transitive-closure(s|[])
	
	transitive-closure(s|accu): []		-> accu
	transitive-closure(s|accu): [h|t]	-> result
		where
			if <elem> (h, accu) then
				result := <transitive-closure(s|accu)> t
			else
				result := <conc; transitive-closure(s|[h|accu])> (<s> h, t)
			end

rules // index helpers
			
	index-add-all = index-add-all(|<index-get-current-file>)
	
	index-add = index-add(|<index-get-current-file>)
	
	index-remove = index-remove(|<index-get-current-file>)
	
rules // lists & sets
	
	// make-set with custom equality checker
	make-set(eq) = foldr(![], union(eq), ![<id>])
	
	// move the head of a list to the tail of the list
	hd-to-tl = <conc> (<Tl>, [<Hd>])
	
	/*
	* Compute the sub-list of duplicate items.
	* 
	* @param eq (a, a) -?> b
	*				Strategy for checking equality of two elements
	* @param swp (a, b) -?> (b,a) 
	* 			Strategy for swaping elements if required (for sorting)
	* @type List(a) -> List(b)
	*/
	duplicates(eq,swp) = ?[_];![] <+ qsort(swp); duplicates(eq)
	
	/*
	* Compute the sub-list of duplicate items in a sorted list.
	* @param eq (a, a) -?> b
	*				Strategy for checking equality of two elements
	* @type List(a) -> List(b)
	*/
	duplicates(eq) = ?[_];![] <+ <zip> (<id>, <hd-to-tl>); filter(eq)
	

