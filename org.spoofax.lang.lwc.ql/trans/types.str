module types

imports
	
	include/QL
	nbl-library.generated
	index-library.generated
	analysis-library.generated
	
rules
	
	our-type-of(s) = index-uri; nbl-get-type <+ bottomup( is-string <+ type <+ type-error; s <+ id)
	
	our-type-of = our-type-of(id)
	
	collect-type-errors = where(c := <new-iset>); store-type-errors(|c); <iset-elements> c
	
	store-type-errors(|coll) = our-type-of(\error -> <iset-add(|error)> coll where debug\)
	
	// default for leaves
	
	has-type = ?x ; type ; ?t ; where (<debug(!"has type: ")> (x, t))
	has-no-type = ![<id>]; debug(!"has no type: "); fail
	
	type: Ref(q) 									-> <index-type-of> q
	type: Not(BoolTy()) 					-> BoolTy()
	type: And(BoolTy(), BoolTy()) -> BoolTy()
	type: Or(BoolTy(), BoolTy()) 	-> BoolTy()
	
	type-error: Minus(t1, t2) -> (<id>, $[Type error: ])
	
	type: Lt(t1, t2) 		-> BoolTy() where <lub(coerce); is-comparable> (t1, t2) 
	type: Leq(t1, t2)		-> BoolTy() where <lub(coerce); is-comparable> (t1, t2)
	type: Gt(t1, t2) 		-> BoolTy() where <lub(coerce); is-comparable> (t1, t2)
	type: Geq(t1, t2) 	-> BoolTy() where <lub(coerce); is-comparable> (t1, t2)
	
	type: Eq(t1, t2) 		-> BoolTy() where <lub(coerce)> (t1, t2)
	
	type: Plus(t1, t2)			-> <lub(coerce); is-addable> (t1, t2)
	type: Minus(t1, t2)			-> <lub(coerce); is-addable> (t1, t2)
	
	type: Mul(t1, t2) 			-> <lub(coerce); is-numeric> (t1, t2)
	type: Mul(t, MoneyTy())	-> MoneyTy() where <coerce> (t, FloatTy())
	type: Mul(MoneyTy(), t)	-> MoneyTy() where <coerce> (t, FloatTy())
	
	type: Div(t1, t2)					-> FloatTy() where <lub(coerce); is-addable> (t1, t2)
	type: Div(MoneyTy(), t2)	-> MoneyTy() where <coerce> (t2, FloatTy())
	
	lub = lub(coerce)
	
	lub(s) = s <+ <s> (<Snd>, <Fst>)
	
	coerce: (t, t) 								-> t
	coerce: (IntTy(), FloatTy())	-> FloatTy()
	coerce: (_, StringTy())				-> StringTy()
	
	is-numeric		= IntTy() + FloatTy()
	is-addable		= is-numeric + MoneyTy()
	is-comparable = is-addable + DateTy()
		
rules
	
	index-type-of = index-lookup; index-uri; nbl-get-type
	