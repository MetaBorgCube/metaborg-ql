module types
	
rules
	type-of-bool:
		|[ !exp ]| -> |[ boolean ]|
		where <type-of> exp => |[ boolean ]|
	
	type-of-bool:
		|[ exp1 && exp2 ]| -> |[ boolean ]|
		where
			<type-of> exp1 => |[ boolean ]|;
			<type-of> exp2 => |[ boolean ]|
	
	type-of-bool:
		|[ exp1 || exp2 ]| -> |[ boolean ]|
		where
			<type-of> exp1 => |[ boolean ]|;
			<type-of> exp2 => |[ boolean ]|
	
	type-of = type-of-bool




















	type-of: Lt(e1, e2) 		-> BoolTy() where <lub(coerce); is-comparable> (<type-of> e1, <type-of> e2) 
	type-of: Leq(e1, e2)		-> BoolTy() where <lub(coerce); is-comparable> (<type-of> e1, <type-of> e2)
	type-of: Gt(e1, e2) 		-> BoolTy() where <lub(coerce); is-comparable> (<type-of> e1, <type-of> e2)
	type-of: Geq(e1, e2)		-> BoolTy() where <lub(coerce); is-comparable> (<type-of> e1, <type-of> e2)
	
	type-of: Eq(e1, e2) 		-> BoolTy() where <lub(coerce)> (<type-of> e1, <type-of> e2)
	type-of: Plus(e1, e2)		-> <lub(coerce); is-addable> (<type-of> e1, <type-of> e2)
	type-of: Minus(e1, e2)	-> <lub(coerce); is-addable> (<type-of> e1, <type-of> e2)
	type-of: Mul(e1, e2) 		-> <lub(coerce); is-numeric> (<type-of> e1, <type-of> e2)
	type-of: Div(e1, e2)		-> <lub(coerce); is-addable> (<type-of> e1, <type-of> e2)
	type-of: Mul(e1, e2) 		-> MoneyTy() where <type-of> e1 => MoneyTy(); <coerce> (<type-of> e2, FloatTy())
	type-of: Mul(e1, e2) 		-> MoneyTy() where <type-of> e2 => MoneyTy(); <coerce> (<type-of> e1, FloatTy())
	type-of: Div(e1, e2)		-> MoneyTy() where <type-of> e1 => MoneyTy(); <coerce> (<type-of> e2, FloatTy())


	type-of: Ref(q) 				-> <index-lookup; index-uri; nbl-get-type> q
	
	lub = lub(coerce)
	
	lub(s) = s <+ <s> (<Snd>, <Fst>)
	
	coerce: (t, t) 								-> t
	coerce: (IntTy(), FloatTy())	-> FloatTy()
	coerce: (_, StringTy())				-> StringTy()
	
	is-numeric		= IntTy() + FloatTy()
	is-addable		= is-numeric + MoneyTy()
	is-comparable = is-addable + DateTy()

imports
	
	include/QL
	lib/nbl-library
	lib/index-library
	lib/analysis-library